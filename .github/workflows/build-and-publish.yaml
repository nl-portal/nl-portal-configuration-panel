name: Build and Push Docker Image
on:
    push:
        branches:
            - "main"
            - "rc/*"
            - "release/*"
env:
    GITHUB_REGISTRY: ghcr.io
    GITHUB_NAMESPACE: nl-portal
    APP_NAME: configuration-panel
    JAVA_VERSION: "21"
    NODE_VERSION: "22.x"
jobs:
    prepare-variables:
        runs-on: ubuntu-latest
        outputs:
            scope: ${{ steps.detect-scope.outputs.SCOPE }}
            backend-tag: ${{ steps.detect-scope.outputs.SCOPE == 'RELEASE' && steps.get-project-versions.outputs.BACKEND_VERSION || steps.generate-snapshot-rc-version.outputs.BACKEND_SNAPSHOT_VERSION }}
            frontend-tag: ${{ steps.detect-scope.outputs.SCOPE == 'RELEASE' && steps.get-project-versions.outputs.FRONTEND_VERSION || steps.generate-snapshot-rc-version.outputs.FRONTEND_SNAPSHOT_VERSION }}
        steps:
            -   name: Detect scope
                id: detect-scope
                run: echo "SCOPE=$(if ${{ github.ref_name == 'main' }} ; then echo "SNAPSHOT" ; elif ${{ startsWith(github.ref_name, 'rc/') }} ; then echo "RC" ; elif ${{ startsWith(github.ref_name, 'release/') }} ; then echo "RELEASE" ; else echo "UNKNOWN" ; fi)" >> $GITHUB_OUTPUT
            -   name: Log Scope
                run: echo "::notice::Using Scope - ${{ steps.detect-scope.outputs.SCOPE }}"
            -   name: Checkout
                uses: actions/checkout@v4
            -   name: Get version from project
                id: get-project-versions
                run: |
                    echo "BACKEND_VERSION=$(grep "version" backend/gradle.properties | sed 's/^.*=//' | grep -Po '\d+\.\d+\.\d+')" >> $GITHUB_OUTPUT
                    echo "FRONTEND_VERSION=$(grep "version" frontend/package.json | grep -Po '\d+\.\d+\.\d+')" >> $GITHUB_OUTPUT
            -   name: Generate SNAPSHOT/RC Tag
                id: generate-snapshot-rc-version
                if: ${{ steps.detect-scope.outputs.SCOPE == 'SNAPSHOT' || steps.detect-scope.outputs.SCOPE == 'RC' }}
                run: |
                    be_version=${{ steps.get-project-versions.outputs.BACKEND_VERSION }}
                    fe_version=${{ steps.get-project-versions.outputs.FRONTEND_VERSION }}
                    branch=${GITHUB_REF##*/}
                    sha=${GITHUB_SHA::8}
                    ts=$(date +'%Y%m%d%H%M')
                    echo "BACKEND_SNAPSHOT_VERSION=${{ steps.detect-scope.outputs.SCOPE == 'RC' && '${be_version}-${ts}-RC' || '${branch}-${ts}-${sha}-SHAPSHOT' }}" >> "$GITHUB_OUTPUT"
                    echo "FRONTEND_SNAPSHOT_VERSION=${{ steps.detect-scope.outputs.SCOPE == 'RC' && '${fe_version}-${ts}-RC' || '${branch}-${ts}-${sha}-SHAPSHOT' }}" >> "$GITHUB_OUTPUT"
    build-and-publish-be:
        runs-on: ubuntu-latest
        needs:
            - prepare-variables
        if: ${{ needs.prepare-variables.outputs.scope != 'UNKNOWN' }}
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
            -   name: Install Cosign
                uses: sigstore/cosign-installer@v4.0.0

            -   name: Set up QEMU
                uses: docker/setup-qemu-action@v3

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: 'Login to github packages'
                uses: docker/login-action@v1
                with:
                    registry: ${{ env.GITHUB_REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}

            -   name: Log Tag
                run: echo "::notice::Using backend tag - ${{ needs.prepare-variables.outputs.backend-tag }}"

            -   id: docker_meta
                uses: docker/metadata-action@v5
                with:
                    images: ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_NAMESPACE }}/${{ env.APP_NAME }}-backend
                    tags: |
                        type=raw,value=latest,enable={{is_default_branch}}
                        type=raw,value=${{ needs.prepare-variables.outputs.backend-tag }}

            -   name: Build and push Docker image
                uses: docker/build-push-action@v6
                id: build-and-push
                with:
                    file: Dockerfile
                    platforms: linux/arm64, linux/amd64
                    context: "{{defaultContext}}:backend"
                    push: true
                    provenance: false
                    tags: ${{ steps.docker_meta.outputs.tags }}
                    labels: ${{ steps.docker_meta.outputs.labels }}

            -   name: Sign the images with GitHub OIDC Token
                env:
                    DIGEST: ${{ steps.build-and-push.outputs.digest }}
                    TAGS: ${{ steps.docker_meta.outputs.tags }}
                run: |
                    images=""
                    for tag in ${TAGS}; do
                      images+="${tag}@${DIGEST} "
                    done
                    cosign sign --yes ${images}

            -   name: Verify the images
                run: |
                    branch=${GITHUB_REF##*/}
                    cosign verify ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_NAMESPACE }}/${{ env.APP_NAME }}-backend:${{ needs.prepare-variables.outputs.backend-tag }} \
                       --certificate-identity https://github.com/${GITHUB_WORKFLOW_REF} \
                       --certificate-oidc-issuer https://token.actions.githubusercontent.com
    build-and-publish-fe:
        runs-on: ubuntu-latest
        needs:
            - prepare-variables
        if: ${{ needs.prepare-variables.outputs.scope != 'UNKNOWN' }}
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
            -   name: Install Cosign
                uses: sigstore/cosign-installer@v4.0.0

            -   name: Set up QEMU
                uses: docker/setup-qemu-action@v3

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: 'Login to github packages'
                uses: docker/login-action@v1
                with:
                    registry: ${{ env.GITHUB_REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}

            -   name: Log Tag
                run: echo "::notice::Using frontend tag - ${{ needs.prepare-variables.outputs.frontend-tag }}"

            -   id: docker_meta
                uses: docker/metadata-action@v5
                with:
                    images: ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_NAMESPACE }}/${{ env.APP_NAME }}-frontend
                    tags: |
                        type=raw,value=latest,enable={{is_default_branch}}
                        type=raw,value=${{ needs.prepare-variables.outputs.frontend-tag }}

            -   name: Build and push Docker image
                uses: docker/build-push-action@v6
                id: build-and-push
                with:
                    file: Dockerfile
                    platforms: linux/arm64, linux/amd64
                    context: "{{defaultContext}}:frontend"
                    push: true
                    provenance: false
                    tags: ${{ steps.docker_meta.outputs.tags }}
                    labels: ${{ steps.docker_meta.outputs.labels }}

            -   name: Sign the images with GitHub OIDC Token
                env:
                    DIGEST: ${{ steps.build-and-push.outputs.digest }}
                    TAGS: ${{ steps.docker_meta.outputs.tags }}
                run: |
                    images=""
                    for tag in ${TAGS}; do
                      images+="${tag}@${DIGEST} "
                    done
                    cosign sign --yes ${images}

            -   name: Verify the images
                run: |
                    cosign verify ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_NAMESPACE }}/${{ env.APP_NAME }}-frontend:${{ needs.prepare-variables.outputs.frontend-tag }} \
                       --certificate-identity https://github.com/${GITHUB_WORKFLOW_REF} \
                       --certificate-oidc-issuer https://token.actions.githubusercontent.com
