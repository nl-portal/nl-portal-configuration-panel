name: Build and Push Docker Image
on:
    push:
        branches:
            - "next-minor"
            - "next-major"
            - "release/*"
env:
    GITHUB_REGISTRY: ghcr.io
    DOCKER_IMAGE_NAME: configuration-panel
    GITHUB_NAMESPACE: nl-portal
    JAVA_VERSION: "21"
    NODE_VERSION: "20.x"
jobs:
    prepare-variables:
        runs-on: ubuntu-latest
        outputs:
            image-tag: ${{ steps.generate-tag.outputs.IMAGE_TAG}}
        steps:
            -   name: Generate Tag
                id: generate-tag
                run: |
                    branch=${GITHUB_REF##*/}
                    sha=${GITHUB_SHA::8}
                    ts=$(date +'%Y%m%d%H%M')
                    echo "IMAGE_TAG=${branch}-${ts}-${sha}" >> "$GITHUB_OUTPUT"
    build-be:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: "./backend"
        needs:
            - prepare-variables
        steps:
            -   uses: actions/checkout@v4
            -   name: Set up JDK ${{ env.JAVA_VERSION }}
                uses: actions/setup-java@v4
                with:
                    java-version: "${{ env.JAVA_VERSION }}"
                    distribution: "temurin"
            -   name: Set up gradle
                uses: gradle/actions/setup-gradle@v4
            -   name: Build with Gradle
                run: ./gradlew build
            -   name: Archive Build
                uses: actions/upload-artifact@v4
                with:
                    name: configuration-panel-backend-build
                    path: backend/build/
                    retention-days: 1
    build-fe:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: "./frontend"
        needs:
            - prepare-variables
        steps:
            -   uses: actions/checkout@v4
            -   name: Set up Node.js ${{ env.NODE_VERSION }}
                uses: actions/setup-node@v4
                with:
                    node-version: ${{ env.NODE_VERSION }}
            -   name: Install
                run: npm install -g pnpm && pnpm install
            -   name: Build
                run: pnpm build
            -   name: Preparation step
                run: mkdir deployment | mv build/ conf/ deployment/

            -   name: Archive dist folder
                uses: actions/upload-artifact@v4
                with:
                    name: configuration-panel-frontend-dist
                    path: frontend/deployment/
                    retention-days: 1
    publish-be:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: "./backend"
        needs:
            - prepare-variables
            - build-be
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 1

            -   name: Install Cosign
                uses: sigstore/cosign-installer@v3.5.0

            -   name: Set up QEMU
                uses: docker/setup-qemu-action@v2.1.0

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v2.5.0

            -   name: Download dist artifact
                uses: actions/download-artifact@v4
                with:
                    name: configuration-panel-backend-build
                    path: backend/

            -   name: Display structure of downloaded files
                run: pwd && ls -R

            -   name: 'Login to github packages'
                uses: docker/login-action@v1
                with:
                    registry: ${{ env.GITHUB_REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}

            -   id: docker_meta
                uses: docker/metadata-action@v5
                with:
                    images: ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}-backend
                    tags: |
                        type=raw,value=latest,enable={{is_default_branch}}
                        type=raw,value=${{ needs.prepare-variables.outputs.image-tag }}

            -   name: Build and push Docker image
                uses: docker/build-push-action@v6
                id: build-and-push
                with:
                    file: ./backend/Dockerfile
                    context: .
                    push: true
                    tags: ${{ steps.docker_meta.outputs.tags }}
                    labels: ${{ steps.docker_meta.outputs.labels }}

            -   name: Sign the images with GitHub OIDC Token
                env:
                    DIGEST: ${{ steps.build-and-push.outputs.digest }}
                    TAGS: ${{ steps.docker_meta.outputs.tags }}
                run: |
                    images=""
                    for tag in ${TAGS}; do
                      images+="${tag}@${DIGEST} "
                    done
                    cosign sign --yes ${images}

            -   name: Verify the images
                run: |
                    branch=${GITHUB_REF##*/}
                    cosign verify ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.prepare-variables.outputs.image-tag }} \
                       --certificate-identity https://github.com/${{ env.GITHUB_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}/.github/workflows/cicd.yaml@refs/heads/${branch} \
                       --certificate-oidc-issuer https://token.actions.githubusercontent.com | jq
    publish-fe:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: "./frontend"
        needs:
            - prepare-variables
            - build-fe
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
            -   name: Checkout code
                uses: actions/checkout@v3.5.2
                with:
                    fetch-depth: 1

            -   name: Install Cosign
                uses: sigstore/cosign-installer@v3.5.0

            -   name: Set up QEMU
                uses: docker/setup-qemu-action@v2.1.0

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v2.5.0

            -   name: Download dist artifact
                uses: actions/download-artifact@v4
                with:
                    name: configuration-panel-frontend-dist
                    path: frontend/

            -   name: Display structure of downloaded files
                run: pwd && ls -R

            -   name: 'Login to github packages'
                uses: docker/login-action@v1
                with:
                    registry: ${{ env.GITHUB_REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}

            -   id: docker_meta
                uses: docker/metadata-action@v5
                with:
                    images: ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}-frontend
                    tags: |
                        type=raw,value=latest,enable={{is_default_branch}}
                        type=raw,value=${{ needs.prepare-variables.outputs.image-tag }}

            -   name: Build and push Docker image
                uses: docker/build-push-action@v6
                id: build-and-push
                with:
                    file: ./frontend/Dockerfile
                    context: .
                    push: true
                    tags: ${{ steps.docker_meta.outputs.tags }}
                    labels: ${{ steps.docker_meta.outputs.labels }}

            -   name: Sign the images with GitHub OIDC Token
                env:
                    DIGEST: ${{ steps.build-and-push.outputs.digest }}
                    TAGS: ${{ steps.docker_meta.outputs.tags }}
                run: |
                    images=""
                    for tag in ${TAGS}; do
                      images+="${tag}@${DIGEST} "
                    done
                    cosign sign --yes ${images}

            -   name: Verify the images
                run: |
                    branch=${GITHUB_REF##*/}
                    cosign verify ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.prepare-variables.outputs.image-tag }} \
                       --certificate-identity https://github.com/${{ env.GITHUB_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}/.github/workflows/cicd.yaml@refs/heads/${branch} \
                       --certificate-oidc-issuer https://token.actions.githubusercontent.com | jq
